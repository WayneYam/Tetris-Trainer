##
## Auto generated by Builder "GNU makefile for g++/gcc" of Videm
## Do not edit this file, any manual changes will be erased
##

##
## User defined environment variables
##
VidemDir:=/home/wayne/.vim/bundle/videm/_videm

# ===== Compiler Variables =====
CCmpCmd      = gcc $(CPPFLAGS) $(CFLAGS) -o $(ObjectFile) -c $(SourceFile)
CxxCmpCmd    = g++ $(CPPFLAGS) $(CXXFLAGS) -o $(ObjectFile) -c $(SourceFile)
CPrpCmd      = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CxxPrpCmd    = g++ -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CDepGenCmd   = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
CxxDepGenCmd = g++ $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
LinkCmd      = g++ -o $(OutputFile) $(Objects) $(LDFLAGS)
ArGenCmd     = ar rcus $(OutputFile) $(Objects)
SoGenCmd     = g++ -shared -fPIC -o $(OutputFile) $(Objects) $(LDFLAGS)

ObjExt := .o
DepExt := .d
PrpExt := .E

CmpIncPaths := 
CmpLibPaths := 

IncPat = -I$(Dir)
MacPat = -D$(Mac)
LipPat = -L$(Lip)
LibPat = -l$(Lib)

## ===== Project Variables =====
WorkspaceName          := Tetris-Trainer
WorkspacePath          := $(CURDIR)/..
ProjectName            := tetris-trainer
ProjectPath            := $(CURDIR)
ConfigurationName      := Release
IntermediateDirectory  := $(ConfigurationName)
OutDir                 := $(IntermediateDirectory)
User                   := wayne
Date                   := 2023-01-08
OutputFile             := $(IntermediateDirectory)/$(ProjectName)
CPPFLAGS               := 
CCXXFLAGS              := 
CFLAGS                 := $(CCXXFLAGS)
CFLAGS                 += 
CXXFLAGS               := $(CCXXFLAGS)
CXXFLAGS               += 
IncPaths               := . .
Macros                 := 
LDFLAGS                := -O2
LibPaths               := .
Libraries              := sfml-window sfml-graphics sfml-system
ProjectType            := app

# auto
CPPFLAGS  += $(foreach Dir,$(CmpIncPaths) $(IncPaths),$(IncPat))
CPPFLAGS  += $(foreach Mac,$(Macros),$(MacPat))
LDFLAGS   += $(foreach Lip,$(CmpLibPaths) $(LibPaths),$(LipPat))
LDFLAGS   += $(foreach Lib,$(Libraries),$(LibPat))

# ###
SourceFile = $<
ObjectFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(ObjExt)
DependFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(DepExt)
PrePrcFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(PrpExt)

# ===== Sources and Objects and Depends and PrePrcs =====
Sources := \
    main.cpp \


Objects := \
    $(OutDir)/main$(ObjExt) \


Depends := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(DepExt))
PrePrcs := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(PrpExt))

MKDIR = mkdir -p
PHONY = all clean PreBuild Building PostBuild DirSanity

# ===== Targets =====
all: DirSanity PostBuild

PostBuild: Building


Building: $(OutputFile)

$(OutputFile): $(Objects)
ifeq ($(ProjectType),app)
	$(LinkCmd)
endif
ifeq ($(ProjectType),so)
	$(SoGenCmd)
endif
ifeq ($(ProjectType),ar)
	$(ArGenCmd)
endif

$(Objects): | PreBuild

PreBuild:


DirSanity:
	@$(MKDIR) $(OutDir)
	@$(MKDIR) $(dir $(OutputFile))

clean:
	$(RM) $(PrePrcs)
	$(RM) $(Depends)
	$(RM) $(Objects)
	$(RM) $(OutputFile)

$(OutDir)/main$(PrpExt): main.cpp
	$(CxxPrpCmd)

$(OutDir)/main$(ObjExt): main.cpp $(OutDir)/main$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/main$(DepExt): main.cpp
	@$(CxxDepGenCmd)

# Generate and include dependencies if we can
ifeq ($(shell test -d $(OutDir) && echo yes || echo no),yes)
  ifeq ($(shell test -f $(word 1,$(Depends)) && echo yes || echo no),yes)
    include $(Depends)
  endif
endif

.PHONY: $(PHONY)
